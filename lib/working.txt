User Creates a Profile, Login is created,
If login is already done, take to home page;

Home page will show all chats, list of all chats
will be a class containing all the chats lists for the User
User from firestore to User class
User().chats (map) => ChatsLList class from map to class

On Click on any chat, select chat id and load that chat data from firestore to chat class
Pass image url and name and userid via chat list

User
    - image
    - name
    - about
    - online
    - phoneNo
    - userid
    - ChatsList 
        - chatid    
        - pending_msgs
        - last_time

Chat
    - messages {
        time,
        msg:userid,
        seen,
    }
    - users [
        userid
    ]
    - grp_photo
    - grp_bio


No User data
    - Show login page
    - User Logs In
    - Creates new User
    - Set Zero chats
    - Save data in provider class

Has User data
    - Show Login Screen
    - User Logs In
    - if values.exists() then load data and save user class
    - Save data in provider class


 - Start Presentation
   You will start from Requirements
   Tell why they are required and where its used
   Explain DFD diagram level 0
   Tell its advantages -
        uses end2end encryption - explain how its done, its encrypted directly from user device and decrypted directly from another device
        Tell them 'but we'll see that ahead'
        Push Notifications - Push notifications are like heart for the chatting app, as you can say without them no user will know whats actually happening.
        
    Limitations - 
        Like other chatting apps ( ofcourse ) the ones who uses databases and users way beyond bluetooth reach it needs an active internet connection
        However the pending messages of any user are queued on their device until internet connection is available.

        Can't share images and videos  - It's just because having a server costs money when you have images and videos to share,  and for demo purpose its fine.






















